#include <WiFi.h>

const int irSensorPin1 = 5;  //start
const int irSensorPin2 = 35; //meta
const int resetButtonPin = 37;
const int ledPin = 17;

unsigned long startTime = 0;
unsigned long endTime = 0;
bool counting = false;
bool finished = false;

// Konfiguracja WiFi
const char* ssid = "ESP32-S3-Pico";  // siec
const char* password = "haslo123";

WiFiServer server(80);

void setup() {
  Serial.begin(115200);
  pinMode(irSensorPin1, INPUT);
  pinMode(irSensorPin2, INPUT);
  pinMode(resetButtonPin, INPUT_PULLUP);
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);


  Serial.println("Konfiguracja Access Point...");
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("Adres IP Access Point: ");
  Serial.println(IP);

  server.begin();
  Serial.println("Serwer HTTP dziala");
}

void loop() {
  int sensorState1 = digitalRead(irSensorPin1);
  int sensorState2 = digitalRead(irSensorPin2);
  int resetButtonState = digitalRead(resetButtonPin);

 
  if (sensorState1 == LOW && !counting && !finished) {
    startTime = millis();
    counting = true;
    finished = false;
    Serial.println("Przerwanie wiązki na pierwszym czujniku - start pomiaru czasu.");
  }

  if (sensorState2 == LOW && counting) {
    endTime = millis();
    counting = false;
    finished = true;
    Serial.print("Przerwanie wiązki na drugim czujniku - koniec pomiaru czasu. Czas trwania: ");
    Serial.print((endTime - startTime) / 1000);
    Serial.print(" s ");
    Serial.print((endTime - startTime) % 1000);
    Serial.println(" ms");
  }

  if (sensorState1 == LOW && finished) {
    startTime = millis();
    counting = true;
    finished = false;
    Serial.println("Przerwanie wiązki na pierwszym czujniku - reset i ponowne rozpoczęcie pomiaru czasu.");
  }


  if (resetButtonState == LOW) {
    startTime = 0;
    endTime = 0;
    counting = false;
    finished = false;
    Serial.println("Przycisk resetu wciśnięty - czas zresetowany.");
  }

  if (sensorState1 == LOW || sensorState2 == LOW) { // dioda 
    digitalWrite(ledPin, HIGH);
  } else {
    digitalWrite(ledPin, LOW);
  }

  WiFiClient client = server.available();
  if (client) {
    String request = client.readStringUntil('\r');
    client.flush();

    if (request.indexOf("/sensor") != -1) {
      unsigned long duration = (counting) ? millis() - startTime : (finished ? endTime - startTime : 0);
      String json = "{";
      json += "\"counting\":" + String(counting ? "true" : "false") + ",";
      json += "\"duration\":" + String(duration);
      json += "}";

      client.println("HTTP/1.1 200 OK");
      client.println("Content-Type: application/json");
      client.println("Connection: close");
      client.println();
      client.println(json);
    } else {
      String html = "<!DOCTYPE html><html><head><title>Bramka</title>";
      html += "<style>body { font-family: Arial, sans-serif; text-align: center; margin-top: 100px; background-color: black; color: white; }";
      html += "#timer { font-size: 120px; color: #4CAF50; margin-top: 100px; }";
      html += "#logo-left { position: absolute; top: 10px; left: 10px; height: 50px; }";
      html += "#logo-right { position: absolute; top: 10px; right: 10px; height: 50px; }";
      html += "</style></head><body>";
      html += "<img id='logo-left' src='https://robotictournament.pl/static/img/logo.png' alt='Logo Left'>";
      html += "<img id='logo-right' src='https://zstrybnik.pl/img/logo.svg' alt='Logo Right'>";
      html += "<h1>Czas od przerwania czujnika 1:</h1>";
      html += "<div id='timer'>00:00:00</div>";
      html += "<script>let interval = setInterval(function() { fetch('/sensor').then(response => response.json()).then(data => { let duration = data.duration; let minutes = Math.floor(duration / 60000); let seconds = Math.floor((duration % 60000) / 1000); let milliseconds = duration % 1000; document.getElementById('timer').innerText = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}:${String(milliseconds).padStart(3, '0')}`; }); }, 30);</script>";
      html += "</body></html>";
      client.println("HTTP/1.1 200 OK");
      client.println("Content-Type: text/html");
      client.println("Connection: close");
      client.println();
      client.println(html);
    }
    delay(10);
    client.stop();
  }
}
